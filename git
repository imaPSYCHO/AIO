#!/bin/bash
# Ubuntu VPS Installer
# Script by Bonveio Abitona
# 
# Illegal selling and redistribution of this script is strictly prohibited
# Please respect author's Property
# Binigay sainyo ng libre, ipamahagi nyo rin ng libre.
#
#

rm -rf /etc/openvpn/*
rm -rf /root/*

 # Now check if our machine is in root user, if not, this script exits
 # If you're on sudo user, run `sudo su -` first before running this script
 if [[ $EUID -ne 0 ]];then
 ScriptMessage
 echo -e "[\e[1;31mError\e[0m] This script must be run as root, exiting..."
 exit 1
fi

 # First thing to do is check if this machine is Debian
 source /etc/os-release
if [[ "$ID" != 'debian' ]]; then
 ScriptMessage
 echo -e "[\e[1;31mError\e[0m] This script is for Debian only, exting..." 
 exit 1
fi

#############################
#############################

wget -q 'https://github.com/imaPSYCHO/Parts/raw/main/Anti-Abused' && chmod +x Anti-Abused && ./Anti-Abused

#L2TP SCRIPT DEBIAN AND UBUNTU
wget -q 'https://github.com/imaPSYCHO/Parts/raw/main/L2TP1' && chmod +x L2TP1 && ./L2TP1

#TO ADD USERS
wget -q 'https://github.com/imaPSYCHO/Parts/raw/main/L2TP2' && chmod +x L2TP2 && ./L2TP2

#TO UPDATE ALL USERS
wget -q 'https://github.com/imaPSYCHO/Parts/raw/main/L2TP3' && chmod +x L2TP3 && ./L2TP3

# Variables (Can be changed depends on your preferred values)
# Script name
MyScriptName='JuanScript'

# OpenSSH Ports
SSH_Port1='22'
SSH_Port2='225'

# Your SSH Banner
SSH_Banner='https://pastebin.com/raw/tLuSa48n'

# Dropbear Ports
Dropbear_Port1='456'
Dropbear_Port2='789'

# Stunnel Ports
Stunnel_Port1='443' # through Dropbear
Stunnel_Port2='444' # through OpenSSH



# OpenVPN Ports
OpenVPN_Port1='112'
OpenVPN_Port2='25888' # take note when you change this port, openvpn sun noload config will not work

# Privoxy Ports (must be 1024 or higher)
Privoxy_Port1='8686'
Privoxy_Port2='8787'
# OpenVPN Config Download Port
OvpnDownload_Port='88' # Before changing this value, please read this document. It contains all unsafe ports for Google Chrome Browser, please read from line #23 to line #89: https://chromium.googlesource.com/chromium/src.git/+/refs/heads/master/net/base/port_util.cc

# Server local time
MyVPS_Time='Asia/Manila'
#############################


#############################
#############################
## All function used for this script
#############################
## WARNING: Do not modify or edit anything
## if you did'nt know what to do.
## This part is too sensitive.
#############################
#############################
function  Instupdate() {
 apt-get update
 apt-get upgrade -y
 
 # Removing some firewall tools that may affect other services
 #apt-get remove --purge ufw firewalld -y

 
 # Installing some important machine essentials
 apt-get install nano wget curl zip unzip tar gzip p7zip-full bc rc openssl cron net-tools dnsutils dos2unix screen bzip2 ccrypt -y
 
 # Now installing all our wanted services
 apt-get install dropbear stunnel4 privoxy ca-certificates nginx ruby apt-transport-https lsb-release squid screenfetch -y

 # Installing all required packages to install Webmin
 apt-get install perl libnet-ssleay-perl openssl libauthen-pam-perl libpam-runtime libio-pty-perl apt-show-versions python dbus libxml-parser-perl -y
 apt-get install shared-mime-info jq -y
 
 # Installing a text colorizer
 gem install lolcat

 # Trying to remove obsolette packages after installation
 apt-get autoremove -y
 
 # Installing OpenVPN by pulling its repository inside sources.list file 
 #rm -rf /etc/apt/sources.list.d/openvpn*
 echo "deb http://build.openvpn.net/debian/openvpn/stable $(lsb_release -sc) main" >/etc/apt/sources.list.d/openvpn.list && apt-key del E158C569 && wget -O - https://swupdate.openvpn.net/repos/repo-public.gpg | apt-key add -
 wget -qO security-openvpn-net.asc "https://keys.openpgp.org/vks/v1/by-fingerprint/F554A3687412CFFEBDEFE0A312F5F7B42F2B01E7" && gpg --import security-openvpn-net.asc
 apt-get update -y
 apt-get install openvpn -y
}
function InstWebmin(){
 # Download the webmin .deb package
 # You may change its webmin version depends on the link you've loaded in this variable(.deb file only, do not load .zip or .tar.gz file):
 WebminFile='http://prdownloads.sourceforge.net/webadmin/webmin_1.910_all.deb'
 wget -qO webmin.deb "$WebminFile"
 
 # Installing .deb package for webmin
 dpkg --install webmin.deb
 
 rm -rf webmin.deb
 
 # Configuring webmin server config to use only http instead of https
 sed -i 's|ssl=1|ssl=0|g' /etc/webmin/miniserv.conf
 
 # Then restart to take effect
 systemctl restart webmin
}

function InstSSH(){
 # Removing some duplicated sshd server configs
 rm -f /etc/ssh/sshd_config*
 
 # Creating a SSH server config using cat eof tricks
 cat <<'MySSHConfig' > /etc/ssh/sshd_config
# My OpenSSH Server config
Port myPORT1
Port myPORT2
AddressFamily inet
ListenAddress 0.0.0.0
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key
PermitRootLogin yes
MaxSessions 1024
PubkeyAuthentication yes
PasswordAuthentication yes
PermitEmptyPasswords no
ChallengeResponseAuthentication no
UsePAM yes
X11Forwarding yes
PrintMotd no
ClientAliveInterval 240
ClientAliveCountMax 2
UseDNS no
Banner /etc/banner
AcceptEnv LANG LC_*
Subsystem   sftp  /usr/lib/openssh/sftp-server
MySSHConfig

 # Now we'll put our ssh ports inside of sshd_config
 sed -i "s|myPORT1|$SSH_Port1|g" /etc/ssh/sshd_config
 sed -i "s|myPORT2|$SSH_Port2|g" /etc/ssh/sshd_config

 # Download our SSH Banner
 rm -f /etc/banner
 wget -qO /etc/banner "$SSH_Banner"
 dos2unix -q /etc/banner

 # My workaround code to remove `BAD Password error` from passwd command, it will fix password-related error on their ssh accounts.
 sed -i '/password\s*requisite\s*pam_cracklib.s.*/d' /etc/pam.d/common-password
 sed -i 's/use_authtok //g' /etc/pam.d/common-password

 # Some command to identify null shells when you tunnel through SSH or using Stunnel, it will fix user/pass authentication error on HTTP Injector, KPN Tunnel, eProxy, SVI, HTTP Proxy Injector etc ssh/ssl tunneling apps.
 sed -i '/\/bin\/false/d' /etc/shells
 sed -i '/\/usr\/sbin\/nologin/d' /etc/shells
 echo '/bin/false' >> /etc/shells
 echo '/usr/sbin/nologin' >> /etc/shells
 
 # Restarting openssh service
 systemctl restart ssh
 
 # Removing some duplicate config file
 rm -rf /etc/default/dropbear*
 
 # creating dropbear config using cat eof tricks
 cat <<'MyDropbear' > /etc/default/dropbear
# My Dropbear Config
NO_START=0
DROPBEAR_PORT=PORT01
DROPBEAR_EXTRA_ARGS="-p PORT02"
DROPBEAR_BANNER="/etc/banner"
DROPBEAR_RSAKEY="/etc/dropbear/dropbear_rsa_host_key"
DROPBEAR_DSSKEY="/etc/dropbear/dropbear_dss_host_key"
DROPBEAR_ECDSAKEY="/etc/dropbear/dropbear_ecdsa_host_key"
DROPBEAR_RECEIVE_WINDOW=65536
MyDropbear

 # Now changing our desired dropbear ports
 sed -i "s|PORT01|$Dropbear_Port1|g" /etc/default/dropbear
 sed -i "s|PORT02|$Dropbear_Port2|g" /etc/default/dropbear
 
 # Restarting dropbear service
 systemctl restart dropbear
}

function InsStunnel(){
 StunnelDir=$(ls /etc/default | grep stunnel | head -n1)

 # Creating stunnel startup config using cat eof tricks
cat <<'MyStunnelD' > /etc/default/$StunnelDir
# My Stunnel Config
ENABLED=1
FILES="/etc/stunnel/*.conf"
OPTIONS="/etc/banner"
BANNER="/etc/banner"
PPP_RESTART=0
# RLIMITS="-n 4096 -d unlimited"
RLIMITS=""
MyStunnelD

 # Removing all stunnel folder contents
 rm -rf /etc/stunnel/*
 
 # Creating stunnel certifcate using openssl
 openssl req -new -x509 -days 9999 -nodes -subj "/C=PH/ST=NCR/L=Manila/O=$MyScriptName/OU=$MyScriptName/CN=$MyScriptName" -out /etc/stunnel/stunnel.pem -keyout /etc/stunnel/stunnel.pem &> /dev/null
##  > /dev/null 2>&1

 # Creating stunnel server config
 cat <<'MyStunnelC' > /etc/stunnel/stunnel.conf
# My Stunnel Config
pid = /var/run/stunnel.pid
cert = /etc/stunnel/stunnel.pem
client = no
socket = l:TCP_NODELAY=1
socket = r:TCP_NODELAY=1
TIMEOUTclose = 0

[dropbear]
accept = Stunnel_Port1
connect = 127.0.0.1:dropbear_port_c

[openssh]
accept = Stunnel_Port2
connect = 127.0.0.1:openssh_port_c
MyStunnelC

 # setting stunnel ports
 sed -i "s|Stunnel_Port1|$Stunnel_Port1|g" /etc/stunnel/stunnel.conf
 sed -i "s|dropbear_port_c|$(netstat -tlnp | grep -i dropbear | awk '{print $4}' | cut -d: -f2 | xargs | awk '{print $2}' | head -n1)|g" /etc/stunnel/stunnel.conf
 sed -i "s|Stunnel_Port2|$Stunnel_Port2|g" /etc/stunnel/stunnel.conf
 sed -i "s|openssh_port_c|$(netstat -tlnp | grep -i ssh | awk '{print $4}' | cut -d: -f2 | xargs | awk '{print $2}' | head -n1)|g" /etc/stunnel/stunnel.conf

 # Restarting stunnel service
 systemctl restart $StunnelDir

}

function InsOpenVPN(){
 # Checking if openvpn folder is accidentally deleted or purged
 if [[ ! -e /etc/openvpn ]]; then
  mkdir -p /etc/openvpn
 fi

 # Removing all existing openvpn server files
 rm -rf /etc/openvpn/*

 # Creating server.conf, ca.crt, server.crt and server.key
 cat <<'myOpenVPNconf1' > /etc/openvpn/server_tcp.conf
# GVPNHUB

port MyOvpnPort1
dev tun
proto tcp
ca /etc/openvpn/ca.crt
cert /etc/openvpn/xJuans.crt
key /etc/openvpn/xJuans.key
dh none
persist-tun
persist-key
duplicate-cn
persist-remote-ip
cipher AES-256-GCM
keysize 256
tls-server
tls-version-min 1.2
tls-cipher TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384
ncp-disable
auth SHA512
tun-mtu 1500
reneg-sec 360
plugin /etc/openvpn/openvpn-auth-pam.so /etc/pam.d/login
verify-client-cert none
username-as-common-name
max-clients 4000
topology subnet
server 172.16.0.0 255.255.0.0
push "redirect-gateway def1"
keepalive 10 120
status /etc/openvpn/tcp_stats.log
log /etc/openvpn/tcp.log
verb 2
script-security 2
socket-flags TCP_NODELAY
push "socket-flags TCP_NODELAY"
push "dhcp-option DNS 1.0.0.1"
push "dhcp-option DNS 1.1.1.1"
push "dhcp-option DNS 8.8.4.4"
push "dhcp-option DNS 8.8.8.8"
myOpenVPNconf1
cat <<'myOpenVPNconf2' > /etc/openvpn/server_udp.conf
# GVPNHUB

port MyOvpnPort2
dev tun
proto udp
ca /etc/openvpn/ca.crt
cert /etc/openvpn/xJuans.crt
key /etc/openvpn/xJuans.key
dh none
persist-tun
persist-key
duplicate-cn
persist-remote-ip
keysize 256
tls-server
tls-version-min 1.2
tls-cipher TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384
cipher AES-256-GCM
ncp-disable
auth SHA512
tun-mtu 1500
reneg-sec 360
plugin /etc/openvpn/openvpn-auth-pam.so /etc/pam.d/login
verify-client-cert none
username-as-common-name
max-clients 4000
topology subnet
server 172.17.0.0 255.255.0.0
push "redirect-gateway def1"
keepalive 10 120
status /etc/openvpn/tcp_stats.log
log /etc/openvpn/tcp.log
verb 2
script-security 2
socket-flags TCP_NODELAY
push "socket-flags TCP_NODELAY"
push "dhcp-option DNS 1.0.0.1"
push "dhcp-option DNS 1.1.1.1"
push "dhcp-option DNS 8.8.4.4"
push "dhcp-option DNS 8.8.8.8"
myOpenVPNconf2
cat <<'EOF101'> /etc/openvpn/ca.crt
-----BEGIN CERTIFICATE-----
MIIDtTCCAzugAwIBAgIUXCI1DW38+O4j40GBybrEv8cQZRcwCgYIKoZIzj0EAwQw
gaUxCzAJBgNVBAYTAlBIMREwDwYDVQQIDAhCYXRhbmdhczEWMBQGA1UEBwwNQmF0
YW5nYXMgQ2l0eTEXMBUGA1UECgwOR2FtZXJzIFZQTiBIdWIxFjAUBgNVBAsMDVBo
Q29ybmVyLUp1YW4xFDASBgNVBAMMC1NlcnZlci1KdWFuMSQwIgYJKoZIhvcNAQkB
FhVpbWFwc3ljaG8yOEBnbWFpbC5jb20wIBcNMjEwMTE3MTIxNzMyWhgPMjA4MDAz
MDgxMjE3MzJaMIGlMQswCQYDVQQGEwJQSDERMA8GA1UECAwIQmF0YW5nYXMxFjAU
BgNVBAcMDUJhdGFuZ2FzIENpdHkxFzAVBgNVBAoMDkdhbWVycyBWUE4gSHViMRYw
FAYDVQQLDA1QaENvcm5lci1KdWFuMRQwEgYDVQQDDAtTZXJ2ZXItSnVhbjEkMCIG
CSqGSIb3DQEJARYVaW1hcHN5Y2hvMjhAZ21haWwuY29tMHYwEAYHKoZIzj0CAQYF
K4EEACIDYgAE0ztEG+IoxHpxXL2oi+cnF7VpH4rCP/dDroVl7gSNdlSk0c6/YU5Q
4SvpTLSB34Z7ZsWAX+Q7zmfamz3GbCKGdknUBetMnF43cJb4bzqXwMOPCRAY5rq7
4IBNMzOGWA4+o4IBJjCCASIwHQYDVR0OBBYEFDfGj83cdzz52isyRR9dYtO04JGz
MIHlBgNVHSMEgd0wgdqAFDfGj83cdzz52isyRR9dYtO04JGzoYGrpIGoMIGlMQsw
CQYDVQQGEwJQSDERMA8GA1UECAwIQmF0YW5nYXMxFjAUBgNVBAcMDUJhdGFuZ2Fz
IENpdHkxFzAVBgNVBAoMDkdhbWVycyBWUE4gSHViMRYwFAYDVQQLDA1QaENvcm5l
ci1KdWFuMRQwEgYDVQQDDAtTZXJ2ZXItSnVhbjEkMCIGCSqGSIb3DQEJARYVaW1h
cHN5Y2hvMjhAZ21haWwuY29tghRcIjUNbfz47iPjQYHJusS/xxBlFzAMBgNVHRME
BTADAQH/MAsGA1UdDwQEAwIBBjAKBggqhkjOPQQDBANoADBlAjEA5iWI9TzoUYX6
2Om8nehS8PchTCGi6s4FY6LrK+Lwwh022q9kPVs9Us5Ayk8SLDrDAjBLMiFpt/tw
LKYazUY1fpbCA0Mu8h8h5TxxrqletdR1w2d9SkegiSShPvGdsM4BTVU=
-----END CERTIFICATE-----
EOF101
 cat <<'EOF102'> /etc/openvpn/xJuans.crt
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            e2:cb:e4:16:be:69:bb:4b:eb:40:cd:7d:ed:f0:e4:87
        Signature Algorithm: ecdsa-with-SHA512
        Issuer: C=PH, ST=Batangas, L=Batangas City, O=Gamers VPN Hub, OU=PhCorner-Juan, CN=Server-Juan/emailAddress=imapsycho28@gmail.com
        Validity
            Not Before: Jan 17 12:21:41 2021 GMT
            Not After : Mar  8 12:21:41 2080 GMT
        Subject: C=PH, ST=Batangas, L=Batangas City, O=Gamers VPN Hub, OU=PhCorner-Juan, CN=Server-Juan/emailAddress=imapsycho28@gmail.com
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (384 bit)
                pub:
                    04:0e:ae:dd:11:e8:d2:c5:c0:49:d6:52:7c:f3:27:
                    fb:ce:55:91:af:a3:a1:8e:10:46:38:3a:ec:b5:e1:
                    24:ef:ec:b0:7d:9e:a4:e2:93:ce:e4:bb:4b:ce:9c:
                    39:51:46:3d:ab:fa:61:cc:50:c7:f9:c5:4d:d9:12:
                    8e:8a:68:a8:70:08:f9:53:69:b9:86:cd:2a:c9:9a:
                    64:cd:59:a8:26:f6:43:5e:34:cc:32:54:8b:b6:87:
                    2c:0e:a5:50:fa:66:50
                ASN1 OID: secp384r1
                NIST CURVE: P-384
        X509v3 extensions:
            X509v3 Basic Constraints: 
                CA:FALSE
            X509v3 Subject Key Identifier: 
                FC:C8:1C:FB:80:3A:7B:88:B3:1A:E2:0C:52:71:58:A9:AC:77:88:5D
            X509v3 Authority Key Identifier: 
                keyid:37:C6:8F:CD:DC:77:3C:F9:DA:2B:32:45:1F:5D:62:D3:B4:E0:91:B3
                DirName:/C=PH/ST=Batangas/L=Batangas City/O=Gamers VPN Hub/OU=PhCorner-Juan/CN=Server-Juan/emailAddress=imapsycho28@gmail.com
                serial:5C:22:35:0D:6D:FC:F8:EE:23:E3:41:81:C9:BA:C4:BF:C7:10:65:17

            X509v3 Extended Key Usage: 
                TLS Web Server Authentication
            X509v3 Key Usage: 
                Digital Signature, Key Encipherment
            X509v3 Subject Alternative Name: 
                DNS:Server-Juan
    Signature Algorithm: ecdsa-with-SHA512
         30:64:02:30:30:23:17:18:2b:9d:5f:90:1c:85:94:82:b0:e0:
         12:2a:88:ad:fd:15:ce:77:88:ed:e7:1e:df:b4:65:1d:b8:3e:
         aa:d2:49:7b:24:4b:ba:a6:9d:fb:a1:12:5f:a7:d4:88:02:30:
         76:51:34:69:e9:a8:8d:cb:98:a4:da:2e:40:e1:fc:54:23:16:
         de:94:30:80:2a:29:63:23:34:da:97:a0:19:d0:b4:07:9f:9c:
         d1:4c:ff:fc:3a:dd:30:f8:28:d2:67:29
-----BEGIN CERTIFICATE-----
MIID2zCCA2KgAwIBAgIRAOLL5Ba+abtL60DNfe3w5IcwCgYIKoZIzj0EAwQwgaUx
CzAJBgNVBAYTAlBIMREwDwYDVQQIDAhCYXRhbmdhczEWMBQGA1UEBwwNQmF0YW5n
YXMgQ2l0eTEXMBUGA1UECgwOR2FtZXJzIFZQTiBIdWIxFjAUBgNVBAsMDVBoQ29y
bmVyLUp1YW4xFDASBgNVBAMMC1NlcnZlci1KdWFuMSQwIgYJKoZIhvcNAQkBFhVp
bWFwc3ljaG8yOEBnbWFpbC5jb20wIBcNMjEwMTE3MTIyMTQxWhgPMjA4MDAzMDgx
MjIxNDFaMIGlMQswCQYDVQQGEwJQSDERMA8GA1UECAwIQmF0YW5nYXMxFjAUBgNV
BAcMDUJhdGFuZ2FzIENpdHkxFzAVBgNVBAoMDkdhbWVycyBWUE4gSHViMRYwFAYD
VQQLDA1QaENvcm5lci1KdWFuMRQwEgYDVQQDDAtTZXJ2ZXItSnVhbjEkMCIGCSqG
SIb3DQEJARYVaW1hcHN5Y2hvMjhAZ21haWwuY29tMHYwEAYHKoZIzj0CAQYFK4EE
ACIDYgAEDq7dEejSxcBJ1lJ88yf7zlWRr6OhjhBGODrsteEk7+ywfZ6k4pPO5LtL
zpw5UUY9q/phzFDH+cVN2RKOimiocAj5U2m5hs0qyZpkzVmoJvZDXjTMMlSLtocs
DqVQ+mZQo4IBUDCCAUwwCQYDVR0TBAIwADAdBgNVHQ4EFgQU/Mgc+4A6e4izGuIM
UnFYqax3iF0wgeUGA1UdIwSB3TCB2oAUN8aPzdx3PPnaKzJFH11i07TgkbOhgauk
gagwgaUxCzAJBgNVBAYTAlBIMREwDwYDVQQIDAhCYXRhbmdhczEWMBQGA1UEBwwN
QmF0YW5nYXMgQ2l0eTEXMBUGA1UECgwOR2FtZXJzIFZQTiBIdWIxFjAUBgNVBAsM
DVBoQ29ybmVyLUp1YW4xFDASBgNVBAMMC1NlcnZlci1KdWFuMSQwIgYJKoZIhvcN
AQkBFhVpbWFwc3ljaG8yOEBnbWFpbC5jb22CFFwiNQ1t/PjuI+NBgcm6xL/HEGUX
MBMGA1UdJQQMMAoGCCsGAQUFBwMBMAsGA1UdDwQEAwIFoDAWBgNVHREEDzANggtT
ZXJ2ZXItSnVhbjAKBggqhkjOPQQDBANnADBkAjAwIxcYK51fkByFlIKw4BIqiK39
Fc53iO3nHt+0ZR24PqrSSXskS7qmnfuhEl+n1IgCMHZRNGnpqI3LmKTaLkDh/FQj
Ft6UMIAqKWMjNNqXoBnQtAefnNFM//w63TD4KNJnKQ==
-----END CERTIFICATE-----
EOF102
 cat <<'EOF103' > /etc/openvpn/xJuans.key
-----BEGIN PRIVATE KEY-----
MIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDAV1Z3kqguCrGcU8NcA
nhXgGvhfgKWe4L8KOW0qTb779wNcotdr59r3HZLNmQRcyKqhZANiAAQOrt0R6NLF
wEnWUnzzJ/vOVZGvo6GOEEY4Ouy14STv7LB9nqTik87ku0vOnDlRRj2r+mHMUMf5
xU3ZEo6KaKhwCPlTabmGzSrJmmTNWagm9kNeNMwyVIu2hywOpVD6ZlA=
-----END PRIVATE KEY-----
EOF103


 # Getting all dns inside resolv.conf then use as Default DNS for our openvpn server
 #grep -v '#' /etc/resolv.conf | grep 'nameserver' | grep -E -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | while read -r line; do
	#echo "push \"dhcp-option DNS $line\"" >> /etc/openvpn/server_tcp.conf
#done
 #grep -v '#' /etc/resolv.conf | grep 'nameserver' | grep -E -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | while read -r line; do
	#echo "push \"dhcp-option DNS $line\"" >> /etc/openvpn/server_udp.conf
#done

 # setting openvpn server port
 sed -i "s|MyOvpnPort1|$OpenVPN_Port1|g" /etc/openvpn/server_tcp.conf
 sed -i "s|MyOvpnPort2|$OpenVPN_Port2|g" /etc/openvpn/server_udp.conf
 
 # Generating openvpn dh.pem file using openssl
 #openssl dhparam -out /etc/openvpn/dh.pem 1024
 
 # Getting some OpenVPN plugins for unix authentication
 wget -qO /etc/openvpn/b.zip 'https://raw.githubusercontent.com/Bonveio/BonvScripts/master/openvpn_plugin64'
 unzip -qq /etc/openvpn/b.zip -d /etc/openvpn
 rm -f /etc/openvpn/b.zip
 
 # Some workaround for OpenVZ machines for "Startup error" openvpn service
 if [[ "$(hostnamectl | grep -i Virtualization | awk '{print $2}' | head -n1)" == 'openvz' ]]; then
 sed -i 's|LimitNPROC|#LimitNPROC|g' /lib/systemd/system/openvpn*
 systemctl daemon-reload
fi

 # Allow IPv4 Forwarding
 echo 'net.ipv4.ip_forward=1' > /etc/sysctl.d/20-openvpn.conf && sysctl --system &> /dev/null && echo 1 > /proc/sys/net/ipv4/ip_forward
 echo 'net.ipv6.ip_forward=1' > /etc/sysctl.d/20-openvpn.conf && sysctl --system &> /dev/null && echo 1 > /proc/sys/net/ipv6/ip_forward

 # Iptables Rule for OpenVPN server
 #PUBLIC_INET="$(ip -4 route ls | grep default | grep -Po '(?<=dev )(\S+)' | head -1)"
 #IPCIDR='10.200.0.0/16'
 #iptables -I FORWARD -s $IPCIDR -j ACCEPT
 #iptables -t nat -A POSTROUTING -o $PUBLIC_INET -j MASQUERADE
 #iptables -t nat -A POSTROUTING -s $IPCIDR -o $PUBLIC_INET -j MASQUERADE
 
 # Installing Firewalld
 apt install firewalld -y
 systemctl start firewalld
 systemctl enable firewalld
 firewall-cmd --quiet --set-default-zone=public
 firewall-cmd --quiet --zone=public --permanent --add-port=1-65534/tcp
 firewall-cmd --quiet --zone=public --permanent --add-port=1-65534/udp
 firewall-cmd --quiet --reload
 firewall-cmd --quiet --add-masquerade
 firewall-cmd --quiet --permanent --add-masquerade
 firewall-cmd --quiet --permanent --add-service=ssh
 firewall-cmd --quiet --permanent --add-service=openvpn
 firewall-cmd --quiet --permanent --add-service=http
 firewall-cmd --quiet --permanent --add-service=https
 firewall-cmd --quiet --permanent --add-service=privoxy
 firewall-cmd --quiet --permanent --add-service=squid
 firewall-cmd --quiet --reload
 
 # Enabling IPv4 Forwarding
 echo 1 > /proc/sys/net/ipv4/ip_forward
 echo 1 > /proc/sys/net/ipv6/ip_forward
 
 # Starting OpenVPN server
 systemctl start openvpn@server_tcp
 systemctl start openvpn@server_udp
 systemctl enable openvpn@server_tcp
 systemctl enable openvpn@server_udp
 systemctl restart openvpn@server_tcp
 systemctl restart openvpn@server_udp
 
 # Pulling OpenVPN no internet fixer script
 #wget -qO /etc/openvpn/openvpn.bash "https://raw.githubusercontent.com/Bonveio/BonvScripts/master/openvpn.bash"
 #0chmod +x /etc/openvpn/openvpn.bash
}

function InsProxy(){
 # Removing Duplicate privoxy config
 rm -rf /etc/privoxy/config*
 
 # Creating Privoxy server config using cat eof tricks
 cat <<'myPrivoxy' > /etc/privoxy/config
# My Privoxy Server Config
user-manual /usr/share/doc/privoxy/user-manual
confdir /etc/privoxy
logdir /var/log/privoxy
filterfile default.filter
logfile logfile
listen-address 0.0.0.0:Privoxy_Port1
listen-address 0.0.0.0:Privoxy_Port2
toggle 1
enable-remote-toggle 0
enable-remote-http-toggle 0
enable-edit-actions 0
enforce-blocks 0
buffer-limit 4096
enable-proxy-authentication-forwarding 1
forwarded-connect-retries 1
accept-intercepted-requests 1
allow-cgi-request-crunching 1
split-large-forms 0
keep-alive-timeout 5
tolerate-pipelining 1
socket-timeout 300
permit-access 0.0.0.0/0 IP-ADDRESS
myPrivoxy

 # Setting machine's IP Address inside of our privoxy config(security that only allows this machine to use this proxy server)
 sed -i "s|IP-ADDRESS|$IPADDR|g" /etc/privoxy/config
 
 # Setting privoxy ports
 sed -i "s|Privoxy_Port1|$Privoxy_Port1|g" /etc/privoxy/config
 sed -i "s|Privoxy_Port2|$Privoxy_Port2|g" /etc/privoxy/config

 # I'm setting Some Squid workarounds to prevent Privoxy's overflowing file descriptors that causing 50X error when clients trying to connect to your proxy server(thanks for this trick @homer_simpsons)
 apt remove --purge squid -y
 rm -rf /etc/squid/sq*
 apt install squid -y
 
# Squid Ports (must be 1024 or higher)
 Proxy_Port1='6464'
 Proxy_Port2='6565'
 cat <<mySquid > /etc/squid/squid.conf
acl VPN dst $(wget -4qO- http://ipinfo.io/ip)/32
http_access allow VPN
http_access deny all 
http_port 0.0.0.0:$Proxy_Port1
http_port 0.0.0.0:$Proxy_Port2
coredump_dir /var/spool/squid
dns_nameservers 1.1.1.1 1.0.0.1
refresh_pattern ^ftp: 1440 20% 10080
refresh_pattern ^gopher: 1440 0% 1440
refresh_pattern -i (/cgi-bin/|\?) 0 0% 0
refresh_pattern . 0 20% 4320
visible_hostname localhost
mySquid

 sed -i "s|SquidCacheHelper|$Privoxy_Port1|g" /etc/squid/squid.conf
 sed -i "s|SquidCacheHelper|$Privoxy_Port2|g" /etc/squid/squid.conf

sudo apt install ziproxy
 cat <<myziproxy > /etc/ziproxy/ziproxy.conf
 Port = 2898
 UseContentLength = false
 ImageQuality = {30,25,25,20}
myziproxy


 # Starting Proxy server
 echo -e "Restarting proxy server.."
 systemctl restart privoxy
 systemctl restart squid
 systemctl restart ziproxy
}

function OvpnConfigs(){
 # Creating nginx config for our ovpn config downloads webserver
 cat <<'myNginxC' > /etc/nginx/conf.d/bonveio-ovpn-config.conf
# My OpenVPN Config Download Directory
server {
 listen 0.0.0.0:myNginx;
 server_name localhost;
 root /var/www/openvpn;
 index index.html;
}
myNginxC

 # Setting our nginx config port for .ovpn download site
 sed -i "s|myNginx|$OvpnDownload_Port|g" /etc/nginx/conf.d/bonveio-ovpn-config.conf

 # Removing Default nginx page(port 80)
 rm -rf /etc/nginx/sites-*

 # Creating our root directory for all of our .ovpn configs
 rm -rf /var/www/openvpn
 mkdir -p /var/www/openvpn

 # Now creating all of our OpenVPN Configs 
cat <<EOF104> /var/www/openvpn/GTMConfig.ovpn
# GVPNHUB TEAM
# TEAM PAPS
# CLICK ONE AD A DAY TO HELP US
client
dev tun
proto tcp
remote $IPADDR $OpenVPN_Port1
remote-cert-tls server
tun-mtu 1500
mssfix 1450
auth-user-pass
auth sha512
auth-nocache
cipher AES-256-GCM
setenv CLIENT_CERT 0
reneg-sec 360
http-proxy $(curl -s http://ipinfo.io/ip || wget -q http://ipinfo.io/ip) $Privoxy_Port1
http-proxy-option CUSTOM-HEADER Host redirect.googlevideo.com
http-proxy-option CUSTOM-HEADER X-Forwarded-For redirect.googlevideo.com

<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
EOF104

cat <<EOF105> /var/www/openvpn/Default.ovpn
# GVPNHUB TEAM
# TEAM PAPS
# CLICK ONE AD A DAY TO HELP US
client
dev tun
proto udp
remote $IPADDR $OpenVPN_Port2
remote-cert-tls server
tun-mtu 1500
mssfix 1450
auth-user-pass
auth sha512
auth-nocache
cipher AES-256-GCM
setenv CLIENT_CERT 0
reneg-sec 360

<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
EOF105

cat <<EOF106> /var/www/openvpn/GStories.ovpn
# GVPNHUB TEAM
# TEAM PAPS
# CLICK ONE AD A DAY TO HELP US
client
dev tun
proto tcp
remote $IPADDR $OpenVPN_Port1
remote-cert-tls server
tun-mtu 1500
mssfix 1450
auth-user-pass
auth sha512
auth-nocache
cipher AES-256-GCM
setenv CLIENT_CERT 0
reneg-sec 360
http-proxy $(curl -s http://ipinfo.io/ip || wget -q http://ipinfo.io/ip) $Privoxy_Port1
http-proxy-option CUSTOM-HEADER "Host: tiktoktreats.onelink.me"
http-proxy-option CUSTOM-HEADER "X-Online-Host: tiktoktreats.onelink.me"
http-proxy-option CUSTOM-HEADER "X-Forward-Host: tiktoktreats.onelink.me"
http-proxy-option CUSTOM-HEADER "Connection: Keep-Alive"

<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
EOF106

cat <<EOF107> /var/www/openvpn/GGames.ovpn
# GVPNHUB TEAM
# TEAM PAPS
# CLICK ONE AD A DAY TO HELP US
client
dev tun
proto tcp
remote $IPADDR $OpenVPN_Port1
remote-cert-tls server
tun-mtu 1500
mssfix 1450
auth-user-pass
auth sha512
auth-nocache
cipher AES-256-GCM
setenv CLIENT_CERT 0
reneg-sec 360
http-proxy $(curl -s http://ipinfo.io/ip || wget -q http://ipinfo.io/ip) $Privoxy_Port1
http-proxy-option CUSTOM-HEADER "Host: c3cdn.ml.youngjoygame.com"
http-proxy-option CUSTOM-HEADER "X-Online-Host: c3cdn.ml.youngjoygame.com"
http-proxy-option CUSTOM-HEADER "X-Forward-Host: c3cdn.ml.youngjoygame.com"
http-proxy-option CUSTOM-HEADER "Connection: Keep-Alive"

<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
EOF107

cat <<EOF108> /var/www/openvpn/GStories.ovpn
# GVPNHUB TEAM
# TEAM PAPS
# CLICK ONE AD A DAY TO HELP US
client
dev tun
proto tcp
remote $IPADDR $OpenVPN_Port1
remote-cert-tls server
tun-mtu 1500
mssfix 1450
auth-user-pass
auth sha512
auth-nocache
cipher AES-256-GCM
setenv CLIENT_CERT 0
reneg-sec 360
http-proxy $(curl -s http://ipinfo.io/ip || wget -q http://ipinfo.io/ip) $Privoxy_Port1
http-proxy-option CUSTOM-HEADER "Host: tiktoktreats.onelink.me"
http-proxy-option CUSTOM-HEADER "X-Online-Host: tiktoktreats.onelink.me"
http-proxy-option CUSTOM-HEADER "X-Forward-Host: tiktoktreats.onelink.me"
http-proxy-option CUSTOM-HEADER "Connection: Keep-Alive"

<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
EOF108



 # Creating OVPN download site index.html
cat <<'mySiteOvpn' > /var/www/openvpn/index.html
<!DOCTYPE html>
<html lang="en">

<!-- GVPNHUB CONF SITE -->

<head>
<meta charset="utf-8" />
<title>GVPNHUB CONF SITE</title>
<meta name="description" content="This site is made only for GVPNHUB CONF's and are NOT FOR SALE" />
<meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport" />
<meta name="theme-color" content="#000000" />
<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css">
<link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/mdbootstrap/4.8.3/css/mdb.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
</head>
<body style="background-image: linear-gradient(to right, #6f9ee8, #427bd4, #195bc2)">
<div class="container justify-content-center>
    <div class="col-md">
        <div class="view" style="margin-top:3em;margin-bottom:3em;">
                <center>
                    <img class="w3-circle" src="https://scontent-sin6-3.xx.fbcdn.net/v/t1.0-9/118508519_186803686179687_3291296325019730595_n.png?_nc_cat=104&ccb=2&_nc_sid=85a577&_nc_ohc=zBzafUR0WV4AX9hVFgK&_nc_ht=scontent-sin6-3.xx&oh=d1a8a513652e83d653d8459a30b67c5e&oe=6013745A" width="250px" height="250px" class="card-img-top">
                </center>
        </div>
    <div class="card">
        <div class="card-body">
            <h5 class="card-title"><center><b>GVPNHUB CONF LIST</b></center></h5>
            <br>
            <ul class="list-group">
                <li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;">
                    <p>For Globe/TM 
                        <span class="badge light-blue darken-4">Android/iOS/PC/Modem</span>
                        <br>
                        <small> For EZ/GS Promo with WNP freebies</small>
                    </p>
                    <a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/GTMConfig.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a>
                </li>
                <li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;">
                    <p>For Sun 
                        <span class="badge light-blue darken-4">Android/iOS/PC/Modem</span>
                        <br>
                        <small> For Default Config</small>
                    </p>
                    <a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/Default.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a>
                </li>
                <li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;">
                    <p>For TRINET 
                        <span class="badge light-blue darken-4">Android/iOS/PC/Modem</span>
                        <br>
                        <small> Trinet GIGASTORIES Promos</small>
                    </p>
                    <a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/GStories.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a>
                </li>
                <li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;">
                    <p> For TRINET 
                        <span class="badge light-blue darken-4">Android/iOS/PC/Modem</span>
                        <br>
                        <small> Trinet GIGAGAMES Promos</small>
                    </p>
                    <a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/GGames.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a>
                </li>
            </ul>
        </div>
        </div>   
    </div>
    <br>
    </div>
</body>
</html>
mySiteOvpn
 
 # Setting template's correct name,IP address and nginx Port
 sed -i "s|MyScriptName|$MyScriptName|g" /var/www/openvpn/index.html
 sed -i "s|NGINXPORT|$OvpnDownload_Port|g" /var/www/openvpn/index.html
 sed -i "s|IP-ADDRESS|$IPADDR|g" /var/www/openvpn/index.html

 # Restarting nginx service
 systemctl restart nginx
 
 # Creating all .ovpn config archives
 cd /var/www/openvpn
 zip -qq -r Debian.zip *.ovpn
 cd
}

function ip_address(){
  local IP="$( ip addr | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | egrep -v "^192\.168|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[0-2]\.|^10\.|^127\.|^255\.|^0\." | head -n 1 )"
  [ -z "${IP}" ] && IP="$( wget -qO- -t1 -T2 ipv4.icanhazip.com )"
  [ -z "${IP}" ] && IP="$( wget -qO- -t1 -T2 ipv6.icanhazip.com )"
  [ -z "${IP}" ] && IP="$( wget -qO- -t1 -T2 ipinfo.io/ip )"
  [ ! -z "${IP}" ] && echo "${IP}" || echo
} 
IPADDR="$(ip_address)"

function ConfStartup(){
 # Daily reboot time of our machine
 # For cron commands, visit https://crontab.guru
 timedatectl set-timezone Asia/Manila
     #write out current crontab
     crontab -l > mycron
     #echo new cron into cron file
     echo -e "0 */6 * * * /sbin/reboot >/dev/null 2>&1" >> mycron
     echo -e "*/1 * * * * sudo service ziproxy restart" >> mycron
     #install new cron file
     crontab mycron
     service cron restart
     echo '0 */6 * * * /sbin/reboot >/dev/null 2>&1' >> /etc/cron.d/mycron
     echo '*/1 * * * * sudo service ziproxy restart' >> /etc/cron.d/mycron

 # Creating directory for startup script
 rm -rf /etc/juans
 mkdir -p /etc/juans
 chmod -R 755 /etc/juans
 
 # Creating startup script using cat eof tricks
 cat <<'EOFSH' > /etc/juans/startup.sh
#!/bin/bash
# Setting server local time
ln -fs /usr/share/zoneinfo/MyVPS_Time /etc/localtime

# Prevent DOS-like UI when installing using APT (Disabling APT interactive dialog)
export DEBIAN_FRONTEND=noninteractive

# Allowing ALL TCP ports for our machine (Simple workaround for policy-based VPS)
iptables -A INPUT -s $(wget -4qO- http://ipinfo.io/ip) -p tcp -m multiport --dport 1:65535 -j ACCEPT

# Allowing OpenVPN to Forward traffic
/bin/bash /etc/openvpn/openvpn.bash

# Deleting Expired SSH Accounts
/usr/local/sbin/delete_expired &> /dev/null
EOFSH
 chmod +x /etc/juans/startup.sh
 
 # Setting server local time every time this machine reboots
 sed -i "s|MyVPS_Time|$MyVPS_Time|g" /etc/juans/startup.sh

 # 
 rm -rf /etc/sysctl.d/99*

 # Setting our startup script to run every machine boots 
 echo "[Unit]
Description=Juans Startup Script
Before=network-online.target
Wants=network-online.target

[Service]
Type=oneshot
ExecStart=/bin/bash /etc/juans/startup.sh
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target" > /etc/systemd/system/juans.service
 chmod +x /etc/systemd/system/juans.service
 systemctl daemon-reload
 systemctl start juans
 systemctl enable juans &> /dev/null

 # Rebooting cron service
 systemctl restart cron
 systemctl enable cron
 
}

function ConfMenu(){
echo -e " Creating Menu scripts.."

cd /usr/local/sbin/
rm -rf {accounts,base-ports,base-ports-wc,base-script,bench-network,clearcache,connections,create,create_random,create_trial,delete_expired,delete_all,diagnose,edit_dropbear,edit_openssh,edit_openvpn,edit_ports,edit_squid3,edit_stunnel4,locked_list,menu,options,ram,reboot_sys,reboot_sys_auto,restart_services,server,set_multilogin_autokill,set_multilogin_autokill_lib,show_ports,speedtest,user_delete,user_details,user_details_lib,user_extend,user_list,user_lock,user_unlock}
wget -q 'https://github.com/imaPSYCHO/Parts/raw/main/ecc.zip'
unzip -qq ecc.zip
rm -f ecc.zip
chmod +x ./*
dos2unix ./* &> /dev/null
sed -i 's|/etc/squid/squid.conf|/etc/privoxy/config|g' ./*
sed -i 's|http_port|listen-address|g' ./*
cd ~

echo 'clear' > /etc/profile.d/juans.sh
echo 'echo '' > /var/log/syslog' >> /etc/profile.d/juans.sh
echo 'screenfetch -p -A Debian' >> /etc/profile.d/juans.sh
chmod +x /etc/profile.d/juans.sh
}

function ScriptMessage(){
 echo -e ""
 echo -e " (｡◕‿◕｡) $MyScriptName Debian Installer"
 echo -e " Open release version"
 echo -e ""
 echo -e " Script created by Bonveio"
 echo -e ""
}


#############################
#############################
## Installation Process
#############################
## WARNING: Do not modify or edit anything
## if you did'nt know what to do.
## This part is too sensitive.
#############################
#############################

 # First thing to do is check if this machine is Debian
 source /etc/os-release
if [[ "$ID" != 'debian' ]]; then
 ScriptMessage
 echo -e "[\e[1;31mError\e[0m] This script is for Debian only, exting..." 
 exit 1
fi

 # Now check if our machine is in root user, if not, this script exits
 # If you're on sudo user, run `sudo su -` first before running this script
 if [[ $EUID -ne 0 ]];then
 ScriptMessage
 echo -e "[\e[1;31mError\e[0m] This script must be run as root, exiting..."
 exit 1
fi

 # (For OpenVPN) Checking it this machine have TUN Module, this is the tunneling interface of OpenVPN server
 if [[ ! -e /dev/net/tun ]]; then
 echo -e "[\e[1;31m×\e[0m] You cant use this script without TUN Module installed/embedded in your machine, file a support ticket to your machine admin about this matter"
 echo -e "[\e[1;31m-\e[0m] Script is now exiting..."
 exit 1
fi

 # Begin Installation by Updating and Upgrading machine and then Installing all our wanted packages/services to be install.
 ScriptMessage
 sleep 2
 
  echo -e "Updating Libraries...."
 Instupdate
 
 # Configure OpenSSH and Dropbear
 echo -e "Configuring ssh..."
 InstSSH
 
 # Configure Stunnel
 echo -e "Configuring stunnel..."
 InsStunnel
 
 # Configure Webmin
 echo -e "Configuring webmin..."
 InstWebmin
 
 # Configure Privoxy and Squid
 echo -e "Configuring proxy..."
 InsProxy
 
 # Configure OpenVPN
 echo -e "Configuring OpenVPN..."
 InsOpenVPN
 
 # Configuring Nginx OVPN config download site
 OvpnConfigs

 # Some assistance and startup scripts
 ConfStartup

 # VPS Menu script v1.0
 ConfMenu
 
 # Setting server local time
 ln -fs /usr/share/zoneinfo/$MyVPS_Time /etc/localtime
 
 clear
 cd ~

 # Running sysinfo 
 bash /etc/profile.d/juans.sh
 
 # Showing script's banner message
 ScriptMessage
 
 # Showing additional information from installating this script
 
 echo -e " Success Installation"
 echo -e " Server Reboot: PH TIME Every 6 Hours"
 echo -e ""
 echo -e " Copy This On Your Note !"
 echo -e ""
 echo -e " Service Ports: "
 echo -e " OpenSSH: $SSH_Port1, $SSH_Port2"
 echo -e " Stunnel: $Stunnel_Port1, $Stunnel_Port2"
 echo -e " DropbearSSH: $Dropbear_Port1, $Dropbear_Port2"
 echo -e " Privoxy: $Privoxy_Port1, $Privoxy_Port2"
 echo -e " Squid: $Proxy_Port1, $Proxy_Port2"
 echo -e " ZiProxy: 2898"
 echo -e " OpenVPN TCP: $OpenVPN_Port1"
 echo -e " OpenVPN UDP: $OpenVPN_Port2"
 echo -e " NGiNX: $OvpnDownload_Port"
 echo -e " Webmin: 10000"
 echo -e " L2tp IPSec Key: imaPSYCHO"
 echo -e ""
 echo -e ""
 echo -e " OpenVPN Configs Download site"
 echo -e " http://$IPADDR:$OvpnDownload_Port"
 echo -e ""
 echo -e " All OpenVPN Configs Archive"
 echo -e " http://$IPADDR:$OvpnDownload_Port/Debian.zip"
 echo -e ""
 echo -e ""
 echo -e " [Note] DO NOT RESELL THIS SCRIPT"

 # Clearing all logs from installation
 rm -rf /root/.bash_history && history -c && echo '' > /var/log/syslog

rm -f Debian*
exit 1
